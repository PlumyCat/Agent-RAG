services:
  # PostgreSQL avec pgvector pour le MCP RAG
  postgres:
    image: pgvector/pgvector:pg16
    container_name: mcp-rag-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcp_rag}
      POSTGRES_USER: ${POSTGRES_USER:-mcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_password}
      # Optimisations pour les embeddings vectoriels
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=fr_FR.UTF-8 --lc-ctype=fr_FR.UTF-8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/init-config.sql:/docker-entrypoint-initdb.d/02-config.sql
    command: |
      postgres
      -c shared_preload_libraries=vector,pg_stat_statements
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
      -c huge_pages=off
      # Configuration sp√©cifique pour pgvector
      -c hnsw.ef_search=100
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=1000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp_user} -d ${POSTGRES_DB:-mcp_rag}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # PgAdmin pour l'administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mcp-rag-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@mcprag.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/pgadmin-servers.json:/pgadmin4/servers.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Redis pour le cache et les sessions (optionnel)
  redis:
    image: redis:7-alpine
    container_name: mcp-rag-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: mcp-rag-network